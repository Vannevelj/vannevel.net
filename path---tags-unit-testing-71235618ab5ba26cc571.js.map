{"version":3,"sources":["webpack:///path---tags-unit-testing-71235618ab5ba26cc571.js","webpack:///./.cache/json/tags-unit-testing.json"],"names":["webpackJsonp","563","module","exports","data","site","siteMetadata","title","subtitle","copyright","menu","label","path","author","name","email","twitter","github","allMarkdownRemark","edges","node","fields","slug","categorySlug","frontmatter","date","category","description","pathContext","tag"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,SAAA,oCAAAC,UAAA,yBAAAC,OAA6HC,MAAA,WAAAC,KAAA,MAAgCD,MAAA,WAAAC,KAAA,eAAuCC,QAAYC,KAAA,kBAAAC,MAAA,2BAAAC,QAAA,iBAAAC,OAAA,eAA8GC,mBAAsBC,QAAUC,MAAQC,QAAUC,KAAA,+DAAAC,aAAA,wBAA4GC,aAAgBjB,MAAA,wDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,iJAAsRP,MAAQC,QAAUC,KAAA,mCAAAC,aAAA,uBAA+EC,aAAgBjB,MAAA,4BAAAkB,KAAA,2BAAAC,SAAA,SAAAC,YAAA,sEAA8KP,MAAQC,QAAUC,KAAA,0BAAAC,aAAA,0BAAyEC,aAAgBjB,MAAA,eAAAkB,KAAA,2BAAAC,SAAA,WAAAC,YAAA,sEAAmKP,MAAQC,QAAUC,KAAA,qDAAAC,aAAA,uBAAiGC,aAAgBjB,MAAA,6CAAAkB,KAAA,2BAAAC,SAAA,SAAAC,YAAA,ufAAgnBP,MAAQC,QAAUC,KAAA,+BAAAC,aAAA,wBAA4EC,aAAgBjB,MAAA,sDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,2CAA8KP,MAAQC,QAAUC,KAAA,kEAAAC,aAAA,wBAA+GC,aAAgBjB,MAAA,8DAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,mCAA8KP,MAAQC,QAAUC,KAAA,+DAAAC,aAAA,wBAA4GC,aAAgBjB,MAAA,uDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,ueAA2mBP,MAAQC,QAAUC,KAAA,wDAAAC,aAAA,wBAAqGC,aAAgBjB,MAAA,gDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,iDAA6KC,aAAgBC,IAAA","file":"path---tags-unit-testing-71235618ab5ba26cc571.js","sourcesContent":["webpackJsonp([194347916880816],{\n\n/***/ 563:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"To kill a mocking bug\",\"subtitle\":\"Unearthing curious .NET behaviour\",\"copyright\":\"© All rights reserved.\",\"menu\":[{\"label\":\"Articles\",\"path\":\"/\"},{\"label\":\"Projects\",\"path\":\"/projects/\"}],\"author\":{\"name\":\"Jeroen Vannevel\",\"email\":\"jer_vannevel@outlook.com\",\"twitter\":\"VannevelJeroen\",\"github\":\"Vannevelj\"}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-redux-persist-migrations-with-typescript\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Unit Testing redux-persist migrations with Typescript\",\"date\":\"2020-07-05T17:00:00.000Z\",\"category\":\"Testing\",\"description\":\"redux-persist allows you to specify a migration path between versions, but how can you do that in a strongly-typed way through Typescript?\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/introducing-roslyntester/\",\"categorySlug\":\"/categories/roslyn/\"},\"frontmatter\":{\"title\":\"Introducing: RoslynTester\",\"date\":\"2015-05-21T00:00:00.000Z\",\"category\":\"Roslyn\",\"description\":\"NuGet package to help you unit test your Roslyn-based analyzers\"}}},{\"node\":{\"fields\":{\"slug\":\"/projects/roslyntester/\",\"categorySlug\":\"/categories/dev-tools/\"},\"frontmatter\":{\"title\":\"RoslynTester\",\"date\":\"2015-05-21T00:00:00.000Z\",\"category\":\"DevTools\",\"description\":\"NuGet package to help you unit test your Roslyn-based analyzers\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/getting-started-with-your-first-diagnostic/\",\"categorySlug\":\"/categories/roslyn/\"},\"frontmatter\":{\"title\":\"Getting started with your first diagnostic\",\"date\":\"2015-05-03T00:00:00.000Z\",\"category\":\"Roslyn\",\"description\":\"With the release of Visual Studio 2015 RC, we also received the pretty much final implementation of the Diagnostics implementation. This SDK allows us to create our own diagnostics to help us write proper code that’s being verified against those rules in real-time: you don’t have to perform the verification at a separate build-step. What’s more is that we can combine that with a code fix: a shortcut integrated in Visual Studio that provides us a solution to what we determine to be a problem.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/what-is-unit-testing/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Introduction to Unit Testing: What is Unit Testing?\",\"date\":\"2015-03-31T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"A short introduction to unit testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-your-owin-configured-oauth2-implementation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"How to unit test your OWIN-configured OAuth2 implementation\",\"date\":\"2015-03-21T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Unit testing your OAuth2 API\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-web-api-routes-and-parameter-validation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Unit testing Web API routes and parameter validation\",\"date\":\"2015-03-08T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Let’s talk about routing. If you’ve ever developed a web application then you know the hassle you have with the constant “Resource not found” or “Multiple actions match the request” errors. What if I told you you could fix all this without ever having to open a browser?\\nThat’s right: we’ll unit test our routes! As an added bonus I’ll also show how you can unit test parameter validation since that’s probably one of the most important things to do when creating a (public) API.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/properly-testing-entity-framework-with-effort/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Properly testing Entity-Framework with Effort\",\"date\":\"2015-02-26T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"An introduction to testing your EF logic\"}}}]}},\"pathContext\":{\"tag\":\"Unit Testing\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---tags-unit-testing-71235618ab5ba26cc571.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"To kill a mocking bug\",\"subtitle\":\"Unearthing curious .NET behaviour\",\"copyright\":\"© All rights reserved.\",\"menu\":[{\"label\":\"Articles\",\"path\":\"/\"},{\"label\":\"Projects\",\"path\":\"/projects/\"}],\"author\":{\"name\":\"Jeroen Vannevel\",\"email\":\"jer_vannevel@outlook.com\",\"twitter\":\"VannevelJeroen\",\"github\":\"Vannevelj\"}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-redux-persist-migrations-with-typescript\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Unit Testing redux-persist migrations with Typescript\",\"date\":\"2020-07-05T17:00:00.000Z\",\"category\":\"Testing\",\"description\":\"redux-persist allows you to specify a migration path between versions, but how can you do that in a strongly-typed way through Typescript?\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/introducing-roslyntester/\",\"categorySlug\":\"/categories/roslyn/\"},\"frontmatter\":{\"title\":\"Introducing: RoslynTester\",\"date\":\"2015-05-21T00:00:00.000Z\",\"category\":\"Roslyn\",\"description\":\"NuGet package to help you unit test your Roslyn-based analyzers\"}}},{\"node\":{\"fields\":{\"slug\":\"/projects/roslyntester/\",\"categorySlug\":\"/categories/dev-tools/\"},\"frontmatter\":{\"title\":\"RoslynTester\",\"date\":\"2015-05-21T00:00:00.000Z\",\"category\":\"DevTools\",\"description\":\"NuGet package to help you unit test your Roslyn-based analyzers\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/getting-started-with-your-first-diagnostic/\",\"categorySlug\":\"/categories/roslyn/\"},\"frontmatter\":{\"title\":\"Getting started with your first diagnostic\",\"date\":\"2015-05-03T00:00:00.000Z\",\"category\":\"Roslyn\",\"description\":\"With the release of Visual Studio 2015 RC, we also received the pretty much final implementation of the Diagnostics implementation. This SDK allows us to create our own diagnostics to help us write proper code that’s being verified against those rules in real-time: you don’t have to perform the verification at a separate build-step. What’s more is that we can combine that with a code fix: a shortcut integrated in Visual Studio that provides us a solution to what we determine to be a problem.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/what-is-unit-testing/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Introduction to Unit Testing: What is Unit Testing?\",\"date\":\"2015-03-31T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"A short introduction to unit testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-your-owin-configured-oauth2-implementation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"How to unit test your OWIN-configured OAuth2 implementation\",\"date\":\"2015-03-21T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Unit testing your OAuth2 API\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-web-api-routes-and-parameter-validation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Unit testing Web API routes and parameter validation\",\"date\":\"2015-03-08T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Let’s talk about routing. If you’ve ever developed a web application then you know the hassle you have with the constant “Resource not found” or “Multiple actions match the request” errors. What if I told you you could fix all this without ever having to open a browser?\\nThat’s right: we’ll unit test our routes! As an added bonus I’ll also show how you can unit test parameter validation since that’s probably one of the most important things to do when creating a (public) API.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/properly-testing-entity-framework-with-effort/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Properly testing Entity-Framework with Effort\",\"date\":\"2015-02-26T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"An introduction to testing your EF logic\"}}}]}},\"pathContext\":{\"tag\":\"Unit Testing\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/tags-unit-testing.json\n// module id = 563\n// module chunks = 194347916880816"],"sourceRoot":""}