{"version":3,"sources":["webpack:///path---categories-testing-a4b96ee5b298434c6238.js","webpack:///./.cache/json/categories-testing.json"],"names":["webpackJsonp","437","module","exports","data","site","siteMetadata","title","subtitle","copyright","menu","label","path","author","name","email","twitter","github","allMarkdownRemark","edges","node","fields","slug","categorySlug","frontmatter","date","category","description","pathContext"],"mappings":"AAAAA,cAAc,iBAERC,IACA,SAAUC,EAAQC,GCHxBD,EAAAC,SAAkBC,MAAQC,MAAQC,cAAgBC,MAAA,wBAAAC,SAAA,oCAAAC,UAAA,yBAAAC,OAA6HC,MAAA,WAAAC,KAAA,MAAgCD,MAAA,WAAAC,KAAA,eAAuCC,QAAYC,KAAA,kBAAAC,MAAA,2BAAAC,QAAA,iBAAAC,OAAA,eAA8GC,mBAAsBC,QAAUC,MAAQC,QAAUC,KAAA,sEAAAC,aAAA,wBAAmHC,aAAgBjB,MAAA,8DAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,ufAAkoBP,MAAQC,QAAUC,KAAA,+BAAAC,aAAA,wBAA4EC,aAAgBjB,MAAA,sDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,2CAA8KP,MAAQC,QAAUC,KAAA,kEAAAC,aAAA,wBAA+GC,aAAgBjB,MAAA,8DAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,mCAA8KP,MAAQC,QAAUC,KAAA,+DAAAC,aAAA,wBAA4GC,aAAgBjB,MAAA,uDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,ueAA2mBP,MAAQC,QAAUC,KAAA,wDAAAC,aAAA,wBAAqGC,aAAgBjB,MAAA,gDAAAkB,KAAA,2BAAAC,SAAA,UAAAC,YAAA,iDAA6KC,aAAgBF,SAAA","file":"path---categories-testing-a4b96ee5b298434c6238.js","sourcesContent":["webpackJsonp([163783469962619],{\n\n/***/ 437:\n/***/ (function(module, exports) {\n\n\tmodule.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"To kill a mocking bug\",\"subtitle\":\"Unearthing curious .NET behaviour\",\"copyright\":\"© All rights reserved.\",\"menu\":[{\"label\":\"Articles\",\"path\":\"/\"},{\"label\":\"Projects\",\"path\":\"/projects/\"}],\"author\":{\"name\":\"Jeroen Vannevel\",\"email\":\"jer_vannevel@outlook.com\",\"twitter\":\"VannevelJeroen\",\"github\":\"Vannevelj\"}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/how-to-configure-a-custom-identityuser-for-entity-framework/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"How to configure a custom IdentityUser for Entity-Framework\",\"date\":\"2015-04-03T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"I am getting accustomed to the ASP.NET Identity framework and let me just say that I love it. No more boring hassle with user accounts: all the traditional stuff is already there. However often you’ll find yourself wanting to expand on the default IdentityUser class and add your own fields to it. This was my use case as well here and since I couldn’t find any clear instructions on how this is done exactly, I decided to dive into it especially for you! Well, maybe a little bit for me as well.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/what-is-unit-testing/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Introduction to Unit Testing: What is Unit Testing?\",\"date\":\"2015-03-31T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"A short introduction to unit testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-your-owin-configured-oauth2-implementation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"How to unit test your OWIN-configured OAuth2 implementation\",\"date\":\"2015-03-21T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Unit testing your OAuth2 API\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-web-api-routes-and-parameter-validation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Unit testing Web API routes and parameter validation\",\"date\":\"2015-03-08T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Let’s talk about routing. If you’ve ever developed a web application then you know the hassle you have with the constant “Resource not found” or “Multiple actions match the request” errors. What if I told you you could fix all this without ever having to open a browser?\\nThat’s right: we’ll unit test our routes! As an added bonus I’ll also show how you can unit test parameter validation since that’s probably one of the most important things to do when creating a (public) API.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/properly-testing-entity-framework-with-effort/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Properly testing Entity-Framework with Effort\",\"date\":\"2015-02-26T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"An introduction to testing your EF logic\"}}}]}},\"pathContext\":{\"category\":\"Testing\"}}\n\n/***/ })\n\n});\n\n\n// WEBPACK FOOTER //\n// path---categories-testing-a4b96ee5b298434c6238.js","module.exports = {\"data\":{\"site\":{\"siteMetadata\":{\"title\":\"To kill a mocking bug\",\"subtitle\":\"Unearthing curious .NET behaviour\",\"copyright\":\"© All rights reserved.\",\"menu\":[{\"label\":\"Articles\",\"path\":\"/\"},{\"label\":\"Projects\",\"path\":\"/projects/\"}],\"author\":{\"name\":\"Jeroen Vannevel\",\"email\":\"jer_vannevel@outlook.com\",\"twitter\":\"VannevelJeroen\",\"github\":\"Vannevelj\"}}},\"allMarkdownRemark\":{\"edges\":[{\"node\":{\"fields\":{\"slug\":\"/posts/how-to-configure-a-custom-identityuser-for-entity-framework/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"How to configure a custom IdentityUser for Entity-Framework\",\"date\":\"2015-04-03T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"I am getting accustomed to the ASP.NET Identity framework and let me just say that I love it. No more boring hassle with user accounts: all the traditional stuff is already there. However often you’ll find yourself wanting to expand on the default IdentityUser class and add your own fields to it. This was my use case as well here and since I couldn’t find any clear instructions on how this is done exactly, I decided to dive into it especially for you! Well, maybe a little bit for me as well.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/what-is-unit-testing/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Introduction to Unit Testing: What is Unit Testing?\",\"date\":\"2015-03-31T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"A short introduction to unit testing\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-your-owin-configured-oauth2-implementation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"How to unit test your OWIN-configured OAuth2 implementation\",\"date\":\"2015-03-21T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Unit testing your OAuth2 API\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/unit-testing-web-api-routes-and-parameter-validation/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Unit testing Web API routes and parameter validation\",\"date\":\"2015-03-08T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"Let’s talk about routing. If you’ve ever developed a web application then you know the hassle you have with the constant “Resource not found” or “Multiple actions match the request” errors. What if I told you you could fix all this without ever having to open a browser?\\nThat’s right: we’ll unit test our routes! As an added bonus I’ll also show how you can unit test parameter validation since that’s probably one of the most important things to do when creating a (public) API.\"}}},{\"node\":{\"fields\":{\"slug\":\"/posts/properly-testing-entity-framework-with-effort/\",\"categorySlug\":\"/categories/testing/\"},\"frontmatter\":{\"title\":\"Properly testing Entity-Framework with Effort\",\"date\":\"2015-02-26T00:00:00.000Z\",\"category\":\"Testing\",\"description\":\"An introduction to testing your EF logic\"}}}]}},\"pathContext\":{\"category\":\"Testing\"}}\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./~/json-loader!./.cache/json/categories-testing.json\n// module id = 437\n// module chunks = 163783469962619"],"sourceRoot":""}