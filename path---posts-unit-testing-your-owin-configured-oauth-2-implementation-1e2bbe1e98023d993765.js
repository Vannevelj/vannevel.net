webpackJsonp([0xccacd1851a27],{517:function(n,s){n.exports={data:{site:{siteMetadata:{title:"To kill a mocking bug",subtitle:"Unearthing curious .NET behaviour",author:{name:"Jeroen Vannevel",twitter:"VannevelJeroen"},disqusShortname:"",url:"https://vannevel.net"}},markdownRemark:{id:"/home/runner/work/vannevel.net/vannevel.net/src/pages/articles/2015-03-21---Unit-Testing-Your-Owin-Configured-OAuth2-Implementation/index.md absPath of file >>> MarkdownRemark",html:'<h1>Introduction</h1>\n<p>I recently started implementing OAuth2 in a project by following <a href="http://bitoftech.net/2014/06/01/token-based-authentication-asp-net-web-api-2-owin-asp-net-identity/">this wonderful blog series by Taiseer Joudeh</a>. So far everything is going great but one thing I’m missing is unit tests to make sure everything works fine in the way that I’ve set it up. There’s a lot more to it than just configuring a few options for OAuth so I’d like to have peace of mind on this vital aspect of my application.</p>\n<p>Unit-testing in isolated, minimal environments is great to demonstrate a concept but it’s not always as easy to implement them in an actual environment where there are a lot more components at play. This situation presented itself to me in the form of dependency injection: I have Unity wired up to provide me with repositories and contexts (all in the spirit of unit-testing the separate layers) but the issue arises when I have to adhere to limitations imposed to me by OWIN, Unity and proper unit-testing principles.</p>\n<p>What follows is an example of how you can unit-test your OWIN-powered, Unity-injected Web Api 2 OAuth implementation. For the full implementation of this project you can take a look at Moviepicker on Github.</p>\n<hr>\n<p>I will assume that you have followed the first part of Taiseer’s blogseries. However in order to make sure we are on the same page, here are some relevant pieces of code:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SimpleAuthorizationServerProvider</span> <span class="token punctuation">:</span> <span class="token class-name">OAuthAuthorizationServerProvider</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token keyword">readonly</span> <span class="token class-name">IUserRepository</span> _userRepository<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token function">SimpleAuthorizationServerProvider</span><span class="token punctuation">(</span><span class="token class-name">IUserRepository</span> userRepository<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        _userRepository <span class="token operator">=</span> userRepository<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token class-name">Task</span> <span class="token function">ValidateClientAuthentication</span><span class="token punctuation">(</span><span class="token class-name">OAuthValidateClientAuthenticationContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span><span class="token function">Validated</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token keyword">async</span> <span class="token class-name">Task</span> <span class="token function">GrantResourceOwnerCredentials</span><span class="token punctuation">(</span><span class="token class-name">OAuthGrantResourceOwnerCredentialsContext</span> context<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        context<span class="token punctuation">.</span>OwinContext<span class="token punctuation">.</span>Response<span class="token punctuation">.</span>Headers<span class="token punctuation">.</span><span class="token function">Add</span><span class="token punctuation">(</span><span class="token string">"Access-Control-Allow-Origin"</span><span class="token punctuation">,</span> <span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token punctuation">{</span> <span class="token string">"*"</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">var</span> user <span class="token operator">=</span> <span class="token keyword">await</span> _userRepository<span class="token punctuation">.</span><span class="token function">FindUserAsync</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>UserName<span class="token punctuation">,</span> context<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">if</span> <span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            context<span class="token punctuation">.</span><span class="token function">SetError</span><span class="token punctuation">(</span><span class="token string">"invalid_grant"</span><span class="token punctuation">,</span> <span class="token string">"The username or password is incorrect."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token keyword">return</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n\n        <span class="token keyword">var</span> identity <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ClaimsIdentity</span><span class="token punctuation">(</span>context<span class="token punctuation">.</span>Options<span class="token punctuation">.</span>AuthenticationType<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"sub"</span><span class="token punctuation">,</span> context<span class="token punctuation">.</span>UserName<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        identity<span class="token punctuation">.</span><span class="token function">AddClaim</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Claim</span><span class="token punctuation">(</span><span class="token string">"role"</span><span class="token punctuation">,</span> <span class="token string">"user"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        context<span class="token punctuation">.</span><span class="token function">Validated</span><span class="token punctuation">(</span>identity<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>This is where we verify the user and client’s credentials. Notice that the client is always considered valid since at this point of the series we assume a single client. Later on, this is expanded to multiple clients.\nOne thing to note here is that I have a user repository injected in my provider: this abstraction on top of the database context allows me to set the stage in the unit-test.</p>\n<p>Next up is the <code class="language-text">StartUp</code> class which replaced the <code class="language-text">Global.asax</code> entry point and – amongst other things – configures the OWIN layer.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Startup</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">virtual</span> <span class="token class-name">HttpConfiguration</span> <span class="token function">GetInjectionConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token punctuation">&lt;</span><span class="token class-name">IUserRepository</span><span class="token punctuation">,</span> <span class="token class-name">UserRepository</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransientLifetimeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        container<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">RegisterType</span><span class="token punctuation">&lt;</span><span class="token class-name">IMovieRepository</span><span class="token punctuation">,</span> <span class="token class-name">MovieRepository</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TransientLifetimeManager</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        container<span class="token punctuation">.</span><span class="token function">RegisterInstance</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MoviepickerContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        configuration<span class="token punctuation">.</span>DependencyResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityConfig</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> configuration<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Configuration</span><span class="token punctuation">(</span><span class="token class-name">IAppBuilder</span> app<span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> configuration <span class="token operator">=</span> <span class="token function">GetInjectionConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token comment">// OAuth configuration</span>\n        <span class="token keyword">var</span> oAuthServerOptions <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">OAuthAuthorizationServerOptions</span>\n        <span class="token punctuation">{</span>\n            AllowInsecureHttp <span class="token operator">=</span> <span class="token keyword">true</span><span class="token punctuation">,</span>\n            TokenEndpointPath <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">PathString</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            AccessTokenExpireTimeSpan <span class="token operator">=</span> TimeSpan<span class="token punctuation">.</span><span class="token function">FromDays</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n            Provider <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleAuthorizationServerProvider</span><span class="token punctuation">(</span><span class="token punctuation">(</span>IUserRepository<span class="token punctuation">)</span> configuration<span class="token punctuation">.</span>DependencyResolver<span class="token punctuation">.</span><span class="token function">GetService</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> <span class="token punctuation">(</span>IUserRepository<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">}</span><span class="token punctuation">;</span>\n\n        app<span class="token punctuation">.</span><span class="token function">UseOAuthAuthorizationServer</span><span class="token punctuation">(</span>oAuthServerOptions<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        app<span class="token punctuation">.</span><span class="token function">UseOAuthBearerAuthentication</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">OAuthBearerAuthenticationOptions</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        WebApiConfig<span class="token punctuation">.</span><span class="token function">Register</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        app<span class="token punctuation">.</span><span class="token function">UseCors</span><span class="token punctuation">(</span>CorsOptions<span class="token punctuation">.</span>AllowAll<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        app<span class="token punctuation">.</span><span class="token function">UseWebApi</span><span class="token punctuation">(</span>configuration<span class="token punctuation">)</span><span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>What catches the eye here is the configuration of Unity, more specifically that it is separated from the rest of the configuration and is in fact overridable (notice the <code class="language-text">virtual</code> keyword). Similarly, you can see that the provider being passed to the OAuth authorization options uses our DI-approach to retrieve the repository we decide to inject.</p>\n<p>The reason I went with this approach is simply because I didn’t have another choice: I can’t inject a resource in the <code class="language-text">StartUp</code> class simply because that class is the entry point (or at least, I don’t know of any. If you do, let me know!). So what do we do when we can’t inject our dependencies? That’s right, we <del>mock it</del> extract the injected behaviour and create a subclass to inject the test-specific behaviour like that. If you are up-to-date with your design pattern knowledge, you may recognize <a href="https://en.wikipedia.org/wiki/Template_method_pattern">the Template Method Pattern</a> in this.</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token keyword">private</span> <span class="token keyword">class</span> <span class="token class-name">TestStartupConfiguration</span> <span class="token punctuation">:</span> <span class="token class-name">Startup</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">MoviepickerContext</span> Context<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IUserRepository</span> UserRepository<span class="token punctuation">;</span>\n    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">HttpConfiguration</span> HttpConfiguration<span class="token punctuation">;</span>\n\n    <span class="token keyword">public</span> <span class="token keyword">override</span> <span class="token class-name">HttpConfiguration</span> <span class="token function">GetInjectionConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> container <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityContainer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        container<span class="token punctuation">.</span><span class="token function">RegisterInstance</span><span class="token punctuation">(</span>UserRepository<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        container<span class="token punctuation">.</span><span class="token function">RegisterInstance</span><span class="token punctuation">(</span>Context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        HttpConfiguration<span class="token punctuation">.</span>DependencyResolver <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UnityConfig</span><span class="token punctuation">(</span>container<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">return</span> HttpConfiguration<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>At first sight this code must strike you as troublesome: there are static members in there! The reason why becomes more clear when you take a look at what the <code class="language-text">Microsoft.Owin.Testing</code> package provides for us: creating an in-memory test server uses a creator pattern which does not allow you to pass in arguments, nor does it provide you any control over that startup configuration. In essence this means that we cannot inject our repositories the normal way.</p>\n<p>This should make it more clear:</p>\n<div class="gatsby-highlight">\n      <pre class="language-csharp"><code class="language-csharp"><span class="token punctuation">[</span><span class="token class-name">TestClass</span><span class="token punctuation">]</span>\n<span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AuthorizationTests</span>\n<span class="token punctuation">{</span>\n    <span class="token keyword">private</span> <span class="token class-name">AccountController</span> _accountController<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">MoviepickerContext</span> _context<span class="token punctuation">;</span>\n    <span class="token keyword">private</span> <span class="token class-name">UserRepository</span> _userRepository<span class="token punctuation">;</span>\n\n    <span class="token punctuation">[</span><span class="token class-name">TestInitialize</span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">Initialize</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> configuration <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HttpConfiguration</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _context <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MoviepickerContext</span><span class="token punctuation">(</span>DbConnectionFactory<span class="token punctuation">.</span><span class="token function">CreateTransient</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _userRepository <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserRepository</span><span class="token punctuation">(</span>_context<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        _accountController <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AccountController</span><span class="token punctuation">(</span>_userRepository<span class="token punctuation">)</span> <span class="token punctuation">{</span> Configuration <span class="token operator">=</span> configuration <span class="token punctuation">}</span><span class="token punctuation">;</span>\n        TestStartupConfiguration<span class="token punctuation">.</span>Context <span class="token operator">=</span> _context<span class="token punctuation">;</span>\n        TestStartupConfiguration<span class="token punctuation">.</span>UserRepository <span class="token operator">=</span> _userRepository<span class="token punctuation">;</span>\n        TestStartupConfiguration<span class="token punctuation">.</span>HttpConfiguration <span class="token operator">=</span> configuration<span class="token punctuation">;</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token class-name">TestMethod</span><span class="token punctuation">]</span>\n    <span class="token punctuation">[</span><span class="token class-name">TestCategory</span><span class="token punctuation">(</span><span class="token string">"Unit_AUTHORIZATION"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token class-name">Task</span> <span class="token function">GetToken_WithoutRegisteredUser_ReturnsBadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> user <span class="token operator">=</span> TestDataProvider<span class="token punctuation">.</span><span class="token function">GetUserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> server <span class="token operator">=</span> TestServer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token punctuation">&lt;</span><span class="token class-name">TestStartupConfiguration</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">CreateRequest</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormUrlEncodedContent</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            response<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Be</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token class-name">TestMethod</span><span class="token punctuation">]</span>\n    <span class="token punctuation">[</span><span class="token class-name">TestCategory</span><span class="token punctuation">(</span><span class="token string">"Unit_AUTHORIZATION"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token class-name">Task</span> <span class="token function">GetToken_WithRegisteredUser_ReturnsToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> user <span class="token operator">=</span> TestDataProvider<span class="token punctuation">.</span><span class="token function">GetUserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> _accountController<span class="token punctuation">.</span><span class="token function">RegisterAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> server <span class="token operator">=</span> TestServer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token punctuation">&lt;</span><span class="token class-name">TestStartupConfiguration</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">CreateRequest</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormUrlEncodedContent</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Password<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            response<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeTrue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            <span class="token punctuation">(</span><span class="token keyword">await</span> response<span class="token punctuation">.</span>Content<span class="token punctuation">.</span><span class="token function">ReadAsStringAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">NotBeNullOrWhiteSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n\n    <span class="token punctuation">[</span><span class="token class-name">TestMethod</span><span class="token punctuation">]</span>\n    <span class="token punctuation">[</span><span class="token class-name">TestCategory</span><span class="token punctuation">(</span><span class="token string">"Unit_AUTHORIZATION"</span><span class="token punctuation">)</span><span class="token punctuation">]</span>\n    <span class="token keyword">public</span> <span class="token keyword">async</span> <span class="token class-name">Task</span> <span class="token function">GetToken_WithInvalidCredentials_ReturnsBadRequest</span><span class="token punctuation">(</span><span class="token punctuation">)</span>\n    <span class="token punctuation">{</span>\n        <span class="token keyword">var</span> user <span class="token operator">=</span> TestDataProvider<span class="token punctuation">.</span><span class="token function">GetUserModel</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token keyword">await</span> _accountController<span class="token punctuation">.</span><span class="token function">RegisterAsync</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n        <span class="token keyword">using</span> <span class="token punctuation">(</span><span class="token keyword">var</span> server <span class="token operator">=</span> TestServer<span class="token punctuation">.</span><span class="token generic-method"><span class="token function">Create</span><span class="token punctuation">&lt;</span><span class="token class-name">TestStartupConfiguration</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>\n        <span class="token punctuation">{</span>\n            <span class="token keyword">var</span> response <span class="token operator">=</span> <span class="token keyword">await</span> server<span class="token punctuation">.</span><span class="token function">CreateRequest</span><span class="token punctuation">(</span><span class="token string">"/token"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">And</span><span class="token punctuation">(</span>x <span class="token operator">=</span><span class="token operator">></span> x<span class="token punctuation">.</span>Content <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">FormUrlEncodedContent</span><span class="token punctuation">(</span><span class="token keyword">new</span><span class="token punctuation">[</span><span class="token punctuation">]</span>\n            <span class="token punctuation">{</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"username"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Username<span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"password"</span><span class="token punctuation">,</span> user<span class="token punctuation">.</span>Password <span class="token operator">+</span> <span class="token string">"this can\'t work"</span><span class="token punctuation">)</span><span class="token punctuation">,</span>\n                <span class="token keyword">new</span> <span class="token generic-method"><span class="token function">KeyValuePair</span><span class="token punctuation">&lt;</span><span class="token keyword">string</span><span class="token punctuation">,</span> <span class="token keyword">string</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token string">"grant_type"</span><span class="token punctuation">,</span> <span class="token string">"password"</span><span class="token punctuation">)</span>\n            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">PostAsync</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n\n            response<span class="token punctuation">.</span>IsSuccessStatusCode<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">BeFalse</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>\n            response<span class="token punctuation">.</span>StatusCode<span class="token punctuation">.</span><span class="token function">Should</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">Be</span><span class="token punctuation">(</span>HttpStatusCode<span class="token punctuation">.</span>BadRequest<span class="token punctuation">)</span><span class="token punctuation">;</span>\n        <span class="token punctuation">}</span>\n    <span class="token punctuation">}</span>\n<span class="token punctuation">}</span></code></pre>\n      </div>\n<p>You may recognize the test-databasecontext creation approach in the <code class="language-text">Initialize()</code> method since this was presented in my post on unit-testing with Effort. You can also see how we use these static fields exactly: before every test the repositories are recreated and assigned to our new configuration, essentially overwriting anything that might have remained from a previous run. Since MSTest executes test sequentially by default, this should not pose any troubles.</p>\n<p>Looking at a particular test we can tell it is very straightforward to set up the OWIN middleware: create an in-memory server by passing it our configuration and.. you’re done. The Owin testing package provides you some helpful tools as well to make it more comfortable building the requests.</p>\n<p>As always, the asserting package used is FluentAssertions and on top of that there are the <code class="language-text">Microsoft.Owin.Hosting</code>, <code class="language-text">Microsoft.Owin.Host.HttpListener</code> and <code class="language-text">Microsoft.Owin.Testing</code> packages.</p>\n<h1>Conclusion</h1>\n<p>Testing your OAuth implementation can be done (should be done?) without opening your browser and trying every call in the pipeline just to make sure everything still works. By using the provided <code class="language-text">Microsoft.Owin.Testing</code> package you can easily mimic the actual Owin layer although there are some hoops to jump through when you have additional complexity like dependency injection. Nevertheless I am very pleased by the way unit testing is officially supported (take some notes, Entity-Framework!).</p>',
fields:{tagSlugs:["/tags/c/","/tags/unit-testing/","/tags/asp-net/","/tags/dependency-injection/","/tags/authentication/"]},frontmatter:{title:"How to unit test your OWIN-configured OAuth2 implementation",tags:["C#","Unit Testing","ASP.NET","Dependency Injection","Authentication"],date:"2015-03-21T00:00:00.000Z",description:"Unit testing your OAuth2 API"}}},pathContext:{slug:"/posts/unit-testing-your-owin-configured-oauth2-implementation/"}}}});
//# sourceMappingURL=path---posts-unit-testing-your-owin-configured-oauth-2-implementation-1e2bbe1e98023d993765.js.map