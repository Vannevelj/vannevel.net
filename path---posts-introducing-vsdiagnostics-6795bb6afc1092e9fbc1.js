webpackJsonp([0x8ca8c4b4822b],{506:function(e,t){e.exports={data:{site:{siteMetadata:{title:"To kill a mocking bug",subtitle:"Unearthing curious .NET behaviour",author:{name:"Jeroen Vannevel",twitter:"VannevelJeroen"},disqusShortname:"",url:"https://vannevel.net"}},markdownRemark:{id:"/Users/jeroenvannevel/Documents/source/vannevel.net/src/pages/articles/2015-05-24---Introducing-VSDiagnostics/index.md absPath of file >>> MarkdownRemark",html:'<p>I am happy to announce the first release of <a href="https://github.com/Vannevelj/VSDiagnostics">VSDiagnostics</a>! This project is a group of diagnostics meant for Visual Studio 2015 and up which will help the developer adhere to best practices and avoid common pitfalls.</p>\n<p>These are a few examples of the scenarios currently supported:</p>\n<h2><code class="language-text">if</code> statements without braces</h2>\n<p><img src="/if-without-braces-7b69f198f7e6db4664fe551d5f2c429a.gif" alt="If statements without braces"></p>\n<h2><code class="language-text">String.Empty</code> instead of an empty string</h2>\n<p><img src="/string-dot-empty-a3f37737b1fadfd066117e7f8ffa981e.gif" alt="String.Empty instead of an empty string"></p>\n<h2><code class="language-text">ArgumentException</code> that can use <code class="language-text">nameof()</code></h2>\n<p><img src="/argumentexception-without-nameof-e6a9941cd804762748005315492a9202.gif" alt="ArgumentException that can use nameof()"></p>\n<h2>A <code class="language-text">catch</code> clause that catches a <code class="language-text">NullReferenceException</code></h2>\n<p><img src="/catch-clause-catching-nullreferenceexception-3b74b1672a66aeb2bea94105742dda76.gif" alt="A catch clause that catches a NullReferenceException"></p>\n<h2>Throwing an empty <code class="language-text">ArgumentException</code></h2>\n<p><img src="/throwing-empty-argumentexception-7480e2bc2ef8e6e4ef4a638072b4662c.gif" alt="Throwing an empty ArgumentException"></p>\n<h2>Catching <code class="language-text">Exception</code> without other <code class="language-text">catch</code> clauses</h2>\n<p><img src="/catching-exception-without-other-clauses-f33c64ff635d2ecbef402c514f27c94a.gif" alt="Catching Exception without other catch clauses"></p>\n<p>And many more!</p>\n<p>For the full list, take a look at <a href="https://github.com/Vannevelj/VSDiagnostics">the Github page</a>. If you have a suggestion in mind or you are interested in contributing, let me know: I want this to be a community powered project. I hope this first release already proves helpful to you and I’m eager to hear your feedback and criticism.</p>\n<h1>How do I use this?</h1>\n<p>Simply create a new project using Visual Studio 2015 RC and add [the NuGet package](<a href="https://www.nuget.org/packages/VSDiagnostics/0!">https://www.nuget.org/packages/VSDiagnostics/0!</a> If you don’t find it: make sure you’re also looking in the NuGet V2 package source.</p>',fields:{tagSlugs:["/tags/c/","/tags/roslyn/","/tags/visual-studio/","/tags/diagnostics/"]},frontmatter:{title:"Introducing: VSDiagnostics",tags:["C#","Roslyn","Visual Studio","Diagnostics"],date:"2015-05-24T00:00:00.000Z",description:"I am happy to announce the first release of VSDiagnostics! This project is a group of diagnostics meant for Visual Studio 2015 and up which will help the developer adhere to best practices and avoid common pitfalls."}}},pathContext:{slug:"/posts/introducing-vsdiagnostics/"}}}});
//# sourceMappingURL=path---posts-introducing-vsdiagnostics-6795bb6afc1092e9fbc1.js.map